name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'ci/**'
      - 'cd/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          set -e
          pytest

  build:
    name: Build & Validate Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t sensor-data:ci-test .

      - run: docker run -d -p 5000:5000 --name sensor-data sensor-data:ci-test
      - run: sleep 5

      - run: set -e
      - run: curl --fail http://localhost:5000/temperature || exit 1

      - run: docker stop sensor-data
      - run: docker rm sensor-data

  push-to-ecr:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      
      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: sensor-data
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:v1.0.1 .
          docker push $ECR_REGISTRY/$IMAGE_NAME:v1.0.1
